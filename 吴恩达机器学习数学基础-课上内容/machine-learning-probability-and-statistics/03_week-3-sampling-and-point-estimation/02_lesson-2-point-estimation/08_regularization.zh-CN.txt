因此，首先让我告诉你有关正规化的信息。 想象一下，这是我们的数据集 ，我们有三个模型 可以生成该数据集，或者可以随 心所欲地适合该数据集。 一个是线性的，另一个是 二次多项式，另一个 是十度的多项式。 为了找出哪一个 更有可能生成它， 或者哪一个最合适， 我们来看看损失， 这可能是平方误差。 现在，让我们假设这里的损失分别为 10、2和0.1。 因为正如你所看到 的，第一个模型不太适合数据。 第二个型号 好一点，第三个模型非常非常合适。 第三个是赢家。 但是， 有人告诉我们，获胜的不是第三个，而是第二个获胜。 我们要做的是 应用正则化 来帮助我们不要选择那个模型三， 尽管它非常适合数据，但它有点混乱。 因此，让我们看一下方程式 ，我要输入一些数字。 假设第一个是 y= 4x+3 这行。 第二个是二次二次 x^2-4x+5，第三个是这个十度的多项式。 因此，我们要做的是对 这些模型中的每一个施加惩罚。 而且模型越复杂， 惩罚就越高。 通过这种方式，我们试图对 模型三进行大量惩罚，以免使用它。 因为正如你所看到的， 模型三非常混乱 ，以至于它非常适合数据， 但它不能很好地概括， 它没有真正理解数据的意义 ，这是一个指向上方的二次曲线。 那么罚款是多少？ 好吧，我们要称之为 L_2 点球。 我们在这里使用的是 L_2 正则化。 它将是 多项式所有系数的平方和，常数 除外。 所以这个是 4^2，也就是 16。 这里的这个是 2^2 加上减去 4^2，也就是 20。 这里的这个是所有这些正方形的总和 ，也就是262。 现在，新的损失将是 旧损失和罚款的总和。 所以这里是 26，这里是 22 ，这里是 262.1。 因此，现在获胜者是第二模型。 因此，我们在这里 所做的是修改损失，惩罚过于复杂的模型。 通过这种方式，我们有点想找到 最简单的模型来很好地拟合数据。 通常，如果模型有这样的 多项式方程并且对数损失为 L L，那么 L_2 正则化误差 是不是 最后一个系数的平方和，也不是常数。 我们将有一个叫做 正则化参数的东西， 因为有时候我们不 想应用全部惩罚， 我们想将其乘以 一个小数字，这样这里就不会太激烈。 正则化误差就是对数损失 加上正则化参数 乘以 L_2 正则化误差。 因此，简而言之，正则化就是这样。 但这与概率和 最大可能性有什么关系呢？让我尽快给你看。